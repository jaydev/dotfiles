#!/usr/bin/env python

import os
import re
import subprocess
import sys

modified = re.compile('^(?:M|A)(\s+)(?P<name>.*)')

CHECKS = [
    {
        'output': 'Checking for pdbs...',
        'command': 'grep -n "import pdb" %s',
        'ignore_files': ['.*pre-commit'],
        'print_filename': True,
    },
    {
        'output': 'Checking for ipdbs...',
        'command': 'grep -n "import ipdb" %s',
        'ignore_files': ['.*pre-commit'],
        'print_filename': True,
    },
    {
        'output': 'Checking for debugger...',
        'command': 'grep -n debugger %s',
        'match_files': ['.*\.js$'],
        'print_filename': True,
    },
    {
        'output': 'Checking codequality...',
        'command': 'codequality %s',
        'ignore_files': ['.*migrations.*'],
        'print_filename': True,
    },
]


def matches_file(file_name, match_files):
    return any(re.compile(match_file).match(file_name)
               for match_file in match_files)


def check_files(files, check):
    result = 0
    print check['output']
    for file_name in files:
        if not 'match_files' in check or \
               matches_file(file_name, check['match_files']):
            if not 'ignore_files' in check or \
                   not matches_file(file_name, check['ignore_files']):
                process = subprocess.Popen(
                    check['command'] % file_name, stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE, shell=True)
                out, err = process.communicate()
                if out or err:
                    if check['print_filename']:
                        prefix = '\t%s:' % file_name
                    else:
                        prefix = '\t'
                    output_lines = ['%s%s' % (prefix, line)
                                    for line in out.splitlines()]
                    print '\n'.join(output_lines)
                    if err:
                        print err
                    result = 1
    return result

files = []
# The output will be in the format:
# <shortened SHA1> <commit message>
# <filename 1>
# <filename 2>
# ...
p = subprocess.Popen(
    ['git', 'show', '--name-only', '--oneline', 'HEAD'],
    stdout=subprocess.PIPE)
out, err = p.communicate()
# First line will never have a filename
files = out.splitlines()[1:]

result = 0
for check in CHECKS:
    result = check_files(files, check) or result

sys.exit(result)
