* Paths
#+begin_src emacs-lisp
  (setq load-path
        (append (list nil
                      "~/.emacs.d/jaydevm/vendor"
                      "~/.emacs.d/jaydevm/vendor/auto-complete"
                      "/usr/local/lib/python2.7/site-packages/src/pymacs")
                load-path))
#+end_src

* Keybindings
** Global
#+begin_src emacs-lisp
  ;; Window Switching
  (windmove-default-keybindings) ;; Shift+direction
  (global-set-key "\M-o" (lambda () (interactive) (other-window 1))) ;; forward one
  (global-set-key "\M-i" (lambda () (interactive) (other-window -1))) ;; back one
  ;; Backward delete
  ;; For some reason, had to redefine C-h for zsh. Works normally in bash
  (global-set-key "\C-h" 'delete-backward-char)
  (global-set-key "\M-h" 'paredit-backward-kill-word)
  ;; Go To Line
  (global-set-key "\M-g" 'goto-line)
  ;; Move up/down 5 lines at a time
  (global-set-key "\M-n" (lambda () (interactive) (next-line 5)))
  (global-set-key "\M-p" (lambda () (interactive) (previous-line 5)))
  ;; Smart tab expand
  (global-set-key "\M-k" 'hippie-expand)
#+end_src

** Org
#+begin_src emacs-lisp
  ;; Expand Subtrees
  (define-key org-mode-map "\C-o" 'org-cycle)
#+end_src

** Python
#+begin_src emacs-lisp
  (define-key py-mode-map "\C-\M-n" 'flymake-goto-next-error)
  (define-key py-mode-map "\C-\M-p" 'flymake-goto-prev-error)
  ;; Insert debugger
  (add-hook 'python-mode-hook
    (lambda ()
      (local-set-key (kbd "C-c d") (lambda () (interactive)
        (insert "import ipdb; ipdb.set_trace()")))
    )
  )
#+end_src

* Colors
#+begin_src emacs-lisp
  (custom-set-variables
    ;; custom-set-variables was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
   )
  (custom-set-faces
    ;; custom-set-faces was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
   '(flymake-errline ((nil (:foreground "color-130" :weight bold))))
   '(font-lock-comment-delimiter-face ((nil (:foreground "red"))))
   '(font-lock-comment-face ((nil (:foreground "red"))))
   '(font-lock-constant-face ((((class color) (min-colors 88) (background light)) (:foreground "magenta"))))
   '(font-lock-function-name-face ((((class color) (min-colors 88) (background light)) (:foreground "blue"))))
   '(font-lock-keyword-face ((((class color) (min-colors 88) (background light)) (:foreground "cyan"))))
   '(font-lock-string-face ((((class color) (min-colors 88) (background light)) (:foreground "green"))))
   '(font-lock-type-face ((((class color) (min-colors 8)) (:foreground "yellow"))))
   '(font-lock-variable-name-face ((((class color) (min-colors 88) (background light)) (:foreground "yellow"))))
   '(ido-only-match ((((class color)) (:foreground "green"))))
   '(ido-subdir ((((min-colors 88) (class color)) (:foreground "red"))))
   '(isearch ((t (:background "pink" :foreground "color-232"))))
   '(isearch-fail ((((class color) (min-colors 88) (background light)) (:background "color-208" :foreground "color-232"))))
   '(lazy-highlight ((t (:background "cyan" :foreground "color-232"))))
   '(linum ((t (:foreground "magenta"))))
   '(minibuffer-prompt ((t (:foreground "blue"))))
   '(mode-line ((((class color) (min-colors 88)) (:background "color-229" :foreground "color-232" :box (:line-width -1 :style released-button)))))
   '(mumamo-border-face-in ((t (:foreground "color-94"))))
   '(mumamo-border-face-out ((t (:foreground "color-94"))))
   '(region ((((class color) (min-colors 88) (background light)) (:background "blue" :foreground "white"))))
   '(show-paren-match ((((class color) (background light)) (:background "turquoise" :foreground "color-232")))))
#+end_src

* Modes
** Global
#+begin_src emacs-lisp
  ;; Show line numbers in margin
  (global-linum-mode 1)
  (setq linum-format "%d ")
#+end_src

** Python
#+begin_src emacs-lisp
  ;; License: Gnu Public License
  ;;
  ;; Additional functionality that makes flymake error messages appear
  ;; in the minibuffer when point is on a line containing a flymake
  ;; error. This saves having to mouse over the error, which is a
  ;; keyboard user's annoyance

  (defun show-fly-err-at-point ()
    "If the cursor is sitting on a flymake error, display the
  message in the minibuffer"
    (interactive)
    (let ((line-no (line-number-at-pos)))
      (dolist (elem flymake-err-info)
        (if (eq (car elem) line-no)
            (let ((err (car (second elem))))
              (message "%s" (fly-pyflake-determine-message err)))))))

  (defun fly-pyflake-determine-message (err)
    "pyflake is flakey if it has compile problems, this adjusts the
  message to display, so there is one ;)"
    (cond ((not (or (eq major-mode 'Python) (eq major-mode 'python-mode) t)))
          ((null (flymake-ler-file err))
           ;; normal message do your thing
           (flymake-ler-text err))
          (t ;; could not compile err
           (format "compile error, problem on line %s" (flymake-ler-line err)))))

  (defadvice flymake-goto-next-error (after display-message activate compile)
    "Display the error in the mini-buffer rather than having to mouse over it"
    (show-fly-err-at-point))

  (defadvice flymake-goto-prev-error (after display-message activate compile)
    "Display the error in the mini-buffer rather than having to mouse over it"
    (show-fly-err-at-point))

  (defadvice flymake-mode (before post-command-stuff activate compile)
    "Add functionality to the post command hook so that if the
  cursor is sitting on a flymake error the error information is
  displayed in the minibuffer (rather than having to mouse over
  it)"
    (set (make-local-variable 'post-command-hook)
         (cons 'show-fly-err-at-point post-command-hook)))

  (provide 'flymake-cursor)

  ;; use codequality for type and style checking
  ;; see https://trac.counsyl.com/wiki/CodingStyle
  (when (load "flymake" t)
    (defun flymake-codequality-init ()
      (let* ((temp-file (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-inplace))
             (local-file (file-relative-name
                          temp-file
                          (file-name-directory buffer-file-name))))
        (list "codequality" (list local-file))))
    (setq flymake-allowed-file-name-masks
          '(("\\.py\\'" flymake-codequality-init)
            ("\\.js\\'" flymake-codequality-init)))
    (add-hook 'find-file-hook 'flymake-find-file-hook))

  ;; Library for Python completion, refactoring, renaming, etc.
  (require 'pymacs)
  (autoload 'pymacs-apply "pymacs")
  (autoload 'pymacs-call "pymacs")
  (autoload 'pymacs-eval "pymacs" nil t)
  (autoload 'pymacs-exec "pymacs" nil t)
  (autoload 'pymacs-load "pymacs" nil t)
  (pymacs-load "ropemacs" "rope-")
  (setq ropemacs-enable-autoimport t)

  ;; Nice autocompletion widget
  (require 'auto-complete-config)
  (add-to-list 'ac-dictionary-directories
               "~/.emacs.d/jaydevm/vendor/auto-complete/dict")
  (ac-config-default)
#+end_src

** HTML
#+begin_src emacs-lisp
  ;; I commented out part of this file because it was giving me a
  ;; strange error about not using the default nxml-mode install.
  ;; It seems to work fine now.
  (load "nxhtml/autostart.el")
  ;; turn off the default colors, which look really bad on a dark background
  (setq mumamo-background-colors nil)
  (add-to-list 'auto-mode-alist '("\\.html$" . django-html-mumamo-mode))
#+end_src

** Javascript
#+begin_src emacs-lisp
  (setq espresso-indent-level 4)
#+end_src

** CoffeeScript
#+begin_src emacs-lisp
  (require 'coffee-mode)

  (defun coffee-custom ()
    "coffee-mode-hook"

    ;; CoffeeScript uses two spaces.
    (set (make-local-variable 'tab-width) 2))

    ;; Compile '.coffee' files on every save
    (add-hook 'after-save-hook
      '(lambda ()
         (when (string-match "\.coffee$" (buffer-name))
           (coffee-compile-file))))

  (add-hook 'coffee-mode-hook '(lambda() (coffee-custom)))
#+end_src

** Minor
#+begin_src emacs-lisp
  ;; Automatically reload files after they change on disk
  (global-auto-revert-mode 1)
#+end_src

* Apps
** Emacs Server
We launch the emacs server iff one is not already running.
Use this in conjunction with the ec shell script.
#+begin_src emacs-lisp
  ;; For some reason socket files don't get deleted properly without this, so
  ;; we need this for server-start to work.
  (setq delete-by-moving-to-trash nil)

  ;; For some reason, this is giving an error for hunter and jeremy, so set
  ;;up ignore-errors for now.
  ;;
  ;; Here is the error message:
  ;; Debugger entered--Lisp error: (file-error "Cannot bind server socket" "address already in use")
  ;;
  ;; http://www.mail-archive.com/emacs-pretest-bug@gnu.org/msg08738.html
  ;;
  ;; Solution
  ;; A python file with the following commands will remove the temporary
  ;; server file. Also try including server-force-delete beforehand...
  ;;;;;;;;;;;
  ;; from base.science.lib.path import path
  ;; path('/private/var/folders/Cd/CdNIYL8+G8qNu2I2EGxiAk+++TM/-Tmp-/emacs502').rmtree()
  ;;;;;;;;;;;
  (ignore-errors
    (require 'server)
    (if (not (server-running-p))
        (progn (server-force-delete)
               (server-start)))
    )
#+end_src

* Misc
#+begin_src emacs-lisp
  ;; Turn off visual bell alert when C-g is pressed
  (setq visible-bell nil)
  ;; No more prompting for default tags file
  (setq tags-file-name "~/base/site/TAGS")
  ;; Remove all trailing whitespace on save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; Show row and column numbers
  (setq-default column-number-mode t)
  ;; Turn on keybinding for uppercasing selected region
  (put 'upcase-region 'disabled nil)
  ;; Turn on keybinding for lowercasing selected region
  (put 'downcase-region 'disabled nil)
  ;; Turn off auto line wrapping for lines over 70 chars
  (setq text-mode-hook (remove 'turn-on-auto-fill text-mode-hook))
  ;; This important variable turns off the annoying prompt when you do C-x C-f
  (setq ido-use-filename-at-point nil)
  ;; Always open version-controlled symlinked files without prompting
  (setq vc-follow-symlinks t)
#+end_src
